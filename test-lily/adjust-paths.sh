#!/bin/sh

# Adjust paths in the current directory for new gub setup.

usage_head="\
Usage: $0 [OPTION]... GUB-TARGET-DIR
"

usage_body="\
Adjust font and data path strings in all files of the current
directory.

This script does the following.

. Absolute paths are converted to relative paths if they contain
  'share/lilypond'.

. Use GUB-TARGET-DIR as gub's '\$targetdir' prefix (and its derived
  values '\$tools_prefix' and '\$system_prefix') instead of the value
  given in file 'AAA-prefix' (also in the current directory).  If this
  file is missing, assume

    /home/gub/NewGub/gub/target/linux-x86

  as the old '\$targetdir' prefix that is to be replaced.

Options:
  --help  display this help and exit

  -o DIR  use DIR as '\$targetdir' prefix, ignoring file 'AAA-prefix'"

try_help="\
Try '$0 --help' for more information"

while test $# -ne 0; do
  case $1 in
  --help)
    echo "$usage_head"
    echo "$usage_body"
    exit $?
    ;;

  -o)
    old_targetdir="$2"
    shift
    ;;

  -*)
    echo "$0: invalid option: $1" >&2
    echo "$try_help" >&2
    exit 1
    ;;

  *)
    break
    ;;
  esac

  shift
done

if test $# -ne 1; then
  echo "$usage_head" >&2
  echo "$try_help" >&2
  exit 1
fi

targetdir="$1"

tools_prefix="`dirname \"$targetdir\"`/tools/root/usr"
system_prefix="$targetdir/root/usr"

# The file `AAA-prefix' holds the `$targetdir' value in use while the
# `test-output' tarball was generated.  To be able to compare the results
# with documentation generated by another gub incarnation which uses a
# different path we have to massage all paths in the tarball's files.

if test -z "$old_targetdir"; then
  if test -f AAA-prefix; then
    read -r old_targetdir < AAA-prefix
    old_targetdir=`echo $old_targetdir | sed 's|//*$||'`
  else
    # If `AAA-prefix' is missing (as it can happen in older tarballs), we
    # directly set the value used in those tarballs.
    old_targetdir="/home/gub/NewGub/gub/target/linux-x86"
  fi
fi

old_tools_prefix="`dirname \"$old_targetdir\"`/tools/root/usr"
old_system_prefix="$old_targetdir/root/usr"

# We are going to remove $old_system_prefix from paths containing
# `share/lilypond' so that the fonts in the `test-output' tarball itself are
# used.  Similarly, we replace $old_tools_prefix with $tools_prefix in all
# paths containing `share/fonts', assuming that system fonts across various
# gub installations are always identical.  For everything else,
# $old_targetdir is replaced by $targetdir.

for i in `find . -maxdepth 1 -type f`; do
  sed -i \
      -e "s|$old_system_prefix/share/lilypond|share/lilypond|g" \
      -e "s|$old_tools_prefix/share/fonts|$tools_prefix/share/fonts|g" \
      -e "s|$old_targetdir|$targetdir|g" \
      $i;
done

# eof
